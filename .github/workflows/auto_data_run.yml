name: Automated Sidewalk Data Update

on:
  schedule:
    - cron: "0 5 * * 1"  # Runs every Monday at 5am UTC
  workflow_dispatch:  # Allows manual triggering

jobs:
  initial_run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Install dependencies
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run store_parcel_data.py on first run
        run: |
          if [ ! -f .parcel_path ] || [ "$(cat .parcel_path)" != "$(cat store_parcel_data.py | grep CSV_PARCEL_PATH | cut -d'=' -f2 | tr -d ' \"')" ]; then
            python store_parcel_data.py
            cat store_parcel_data.py | grep CSV_PARCEL_PATH | cut -d'=' -f2 | tr -d ' \"' > .parcel_path
          fi
      - name: Upload database as artifact
        uses: actions/upload-artifact@v3
        with:
          name: sidewalk-data
          path: sidewalk_data.sqlite  # Upload the database file as an artifact

  weekly_run:
    runs-on: ubuntu-latest
    needs: initial_run
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Install dependencies
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run fetch_sidewalk_data.py
        run: python fetch_sidewalk_data.py
      
      - name: Run update_latlong_store_old.py
        run: python update_latlong_store_old.py

      - name: Configure Git for GitHub Actions
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Commit updated database
        run: |
          git add sidewalk_data.sqlite  # Add the database to staging
          git commit -m "Update sidewalk_data.sqlite"  # Commit with a message
          git push  # Push the changes back to the repo
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # This allows push access
